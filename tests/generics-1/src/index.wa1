import {*} from "./option"
import {*} from "./assert"
import {*} from "./basic"

__struct S1 {
    x: int
}

__struct S2 {
    y: number
}

//dumb function
fn f1<T>(x: T) => {} 
//we don't know the type of f1<T> until f2 is resolved, so this means this function call will hang in limbo with an UnresolvedGenericFuncCall
fn f2<U>(x: U) => f1<U>(x)
//this collapses the wave function and generates the code
fn testDelayGenerate() => {
    f2(3)
}

export fn test() -> int {
    //test the identity function on a __struct with explicit and implicit type params
    let s1_1 = __static S1{ x: 3 }
    let s1_2 = basic.id<S1>(s1_1)
    assert.assert(s1_1.x == s1_2.x)
    let s1_3 = basic.id(s1_1)
    assert.assert(s1_1.x == s1_3.x)

    //a second type 
    let s2_1 = __static S2{ y: 3 }
    let s2_2 = basic.id<S2>(s2_1)
    assert.assert(s2_1.y == s2_2.y)

    //let's now use numbers
    let n1: number = 4
    let n2 = basic.id<number>(n1)
    assert.assert(n1 == n2)
    let n3 = basic.id(n1)
    assert.assert(n1 == n3)

    //more complex functions
    let oS = __Some(s1_1)
    assert.assert(option.__Option_unwrap<S1>(oS).x == 3)
    assert.assert(option.__Option_unwrap(oS).x == 3)

    testDelayGenerate()

    1
}
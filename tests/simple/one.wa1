export fn addd(x: Number, y: Number) -> Number {
    x + y
}

export fn negMax(x: Number, y: Number) -> Number {
    let b = true
    if(b && x > y)
        -x
    else {
        -y
    }
}

export fn bang(x: Number) -> Number {
    if(x <= 0)
        return 0

    let out: Number = 1

    while(x > 0) {
        out *= x
        x -= 1
    }

    out
}

//test of non block function. The syntax is pretty weird
fn mul(x: Number, y: Number) -> Number x * y

//test of function call
export fn fourTimes(x: Number) -> Number{
    mul(x, 2) * 2
}

export fn mul3(x: Number, y: Number, z: Number) -> Number {
    return x * y * z
}

export fn idNumber(x:  Number) -> Number {
    x
}

fn assert(x: Bool) -> Void {
    if(!x) __trap()
}

fn inferReturnTypeInt(x: Int) => x
fn inferReturnTypeBool(x: Int) => true

//should warn of unused value
fn badReturnTypeVoid() -> Void 8

fn returnTypeTest() -> Void {
    assert(inferReturnTypeInt(3) == 3)
    assert(inferReturnTypeBool(3) == true)
    badReturnTypeVoid()
}

fn intTest() -> Void {
    const e: Int<0, 4294967295> = 8
    assert(e.countTrailingZeros() == 3)
}

fn asTest() -> Void {
    const a = 9
    const b = a as Number
    const c: Number = b
    //would fail
    //const d: int = b
}

const g = 5
fn globalTest() -> Void {
    assert(g == 5)
}

export fn testSuite() -> Int {
    assert(idNumber(3) == 3)
    assert(idNumber(-3.0) == -3)
    assert(addd(3, 5) == 8)
    assert(negMax(8, 9.1) == -9.1)
    assert(bang(3) == 6)
    assert(fourTimes(3) == 12)
    intTest()
    globalTest()
    returnTypeTest()
    1
}

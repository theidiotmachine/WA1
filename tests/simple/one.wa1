export function addd(x: number, y: number): number {
    x + y;
}

export function negMax(x: number, y: number): number {
    let b = true;
    if(b && x > y)
        -x;
    else {
        -y;
    }
}

export function bang(x: number): number {
    if(x <= 0)
        return 0;

    let out: number = 1;

    while(x > 0) {
        out *= x;
        x -= 1;
    }

    out;
}

//test of non block function. The syntax is pretty weird
function mul(x: number, y: number): number x * y;

//test of function call
export function fourTimes(x: number): number{
    mul(x, 2) * 2;
}

export function mul3(x: number, y: number, z: number): number {
    return x * y * z;
}

export function idNumber(x:  number): number {
    x;
}

function assert(x: boolean): void {
    if(!x) __trap();
}

/*
__struct Simple{
    a: int;
    b: int;
}*/

function structTest(): void {
    /*
    //need malloc
    let c = new Simple {a: 3, b: 4};
    assert(c.a == 3);
    assert(c.b == 4);
    c.a = 8;
    assert(c.a == 8);
    assert(c.b == 4);
    c.b = 9;
    assert(c.a == 8);
    assert(c.b == 9);
    */
}

function intTest(): void {
    const e = 8;
    assert(e.countTrailingZeros() == 3);
}

function asTest(): void {
    const a = 9;
    const b = a as number;
    const c: number = b;
    //would fail
    //const d: int = b;
}

const g = 5;
function globalTest(): void {
    assert(g == 5);
}

export function testSuite(): int {
    assert(idNumber(3) == 3);
    assert(idNumber(-3.0) == -3);
    assert(addd(3, 5) == 8);
    assert(negMax(8, 9.1) == -9.1);
    assert(bang(3) == 6);
    assert(fourTimes(3) == 12);
    structTest();
    intTest();
    globalTest();
    1;
}

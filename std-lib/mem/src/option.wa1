export fn __Option_unwrap<T: __struct T>(x: __Option<T>) -> T {
    if (x == __null) {
        __trap();
    } else {
        x as __ptr as T;
    }
}

export fn __Some_unwrap<T: __struct T>(x: __Some<T>) -> T {
    x as __ptr as T;
}

export fn __Option_isSome<T: __struct T>(x: __Option<T>) -> boolean {
    x != __null;
} /*__typeguard {
    true => x as __Some<T>;
    false => x as __null;
}*/

export fn __Option_isNull<T: __struct T>(x: __Option<T>) -> boolean {
    x == __null;
} /*__typeguard {
    true => x as __null;
    false => x as __Some<T>;
}*/